name: SOCKET

on:
  push:
    branches:
      - "main"
      - "release-*"
      - "*"
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Prepare source name: Tag or branch name"
        id: prepare_source
        run: |
          SOURCE_NAME="${GITHUB_REF#refs/*/}"
          VERSION_FILE=version.txt

          # Leer la versión actual desde un archivo (version.txt)
          if [ -f $VERSION_FILE ]; then
            CURRENT_VERSION=$(cat $VERSION_FILE)
          else
            CURRENT_VERSION="0.0"
          fi

          if [ "$SOURCE_NAME" == "main" ]; then
            # Incrementar la parte 'x' de la versión y reiniciar 'y'
            IFS='.' read -r x y <<< "$CURRENT_VERSION"
            NEW_VERSION="$((x + 1)).$y"
            echo "SOURCE_NAME=latest" >> $GITHUB_ENV
            echo "$((x + 1)).0" > $VERSION_FILE
          else
            # Incrementar la parte 'y' de la versión
            IFS='.' read -r x y <<< "$CURRENT_VERSION"
            NEW_VERSION="$x.$((y + 1))"
            echo "SOURCE_NAME=$NEW_VERSION" >> $GITHUB_ENV
            echo "$x.$((y + 1))" > $VERSION_FILE
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASS }}

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            gastonnicora/remates-socket:${{ env.SOURCE_NAME }}
            gastonnicora/remates-socket:${{ env.NEW_VERSION }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
